# ngrok

Для работы с ngrok необходимо пройти процедуру регистрации для получения токена. Выполнити следующие шаги:

1. Перейдите по [ссылке](https://dashboard.ngrok.com/login) и пройдите процедуру регистрации (можно выбрать «*вход с помощью учетной записи Google*»)
2. После авторизации выберите пункт меню **Your Authtoken**
3. Скопируйте Ваш персональный токен


!pip install --upgrade protobuf

!wget -q https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip

!unzip -q ngrok-stable-linux-amd64.zip

!./ngrok authtoken 2V9RmRYkzZlKfzcx4XTU90iQ9wb_419CUJymPbfTtrjUTaSB6

def get_link():
    get_ipython().system_raw('./ngrok http 8501 &')
    !curl -s http://localhost:4040/api/tunnels | python3 -c \
    'import sys, json; print("Ссылка для streamlit: " + json.load(sys.stdin)["tunnels"][0]["public_url"])'

get_link()

<a name="getlink"></a>
В дальнейшем вам пригодится функция `get_link()`, вызвав которую:

!pip -q install streamlit

!pip install opencv-python

!streamlit hello

code = '''
import streamlit as st
import cv2
from PIL import Image
import numpy as np

# Define the color correction function
def color_correct_image(input_image):
    # Apply bilateral filter to the image
    filtered_image = cv2.bilateralFilter(input_image, 5, 25, 25)

    # Convert the filtered image to the LAB color space
    lab_image = cv2.cvtColor(filtered_image, cv2.COLOR_BGR2LAB)

    # Split the LAB image into L, A, and B channels
    l_channel, a_channel, b_channel = cv2.split(lab_image)

    # Apply CLAHE to the L channel
    clahe = cv2.createCLAHE(clipLimit=4.0, tileGridSize=(8, 8))
    clahe_l_channel = clahe.apply(l_channel)

    # Merge the LAB channels back together
    clahe_lab_image = cv2.merge((clahe_l_channel, a_channel, b_channel))

    # Convert the enhanced LAB image back to the BGR color space
    output_image = cv2.cvtColor(clahe_lab_image, cv2.COLOR_LAB2BGR)

    return output_image

# Create a Streamlit web app
st.title('Image Color Correction App')

# Allow the user to upload an image
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "png"])

if uploaded_file is not None:
    # Read the image
    image = Image.open(uploaded_file)
    img_array = np.array(image)

    # Perform color correction
    corrected_image = color_correct_image(img_array)

    # Display the corrected image
    st.image([image, corrected_image], caption=['Original Image', 'Corrected Image'], width=300)
'''
with open('helloworld1.py', 'w') as f:
    f.write(code)

get_link()

!streamlit run helloworld1.py
