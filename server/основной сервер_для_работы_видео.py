# -*- coding: utf-8 -*-
"""Сервер для работы видео

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iKlxMg14qTeGELteLM4m476hAvoyrEDW

# Rest API для Python видео
"""

!pip install sk-video

!pip install gunicorn

!git clone https://github.com/ArtuomMerkulov/X-MAS-HACK.git

"""Cоздайте папку model в models и перенеситете сюда файл WBsRGB.py. Иначе код не сработает."""

from flask import Flask, request, jsonify
import cv2
from X_MAS_HACK.model1_correction.WB_sRGB_Python.classes.models.model import WBsRGB as wb_srgb

app = Flask(__name__)

# Create an instance of the WB model
wbModel = wb_srgb.WBsRGB(gamut_mapping=2, upgraded=0)

# Define the REST API endpoint for color correction
@app.route('/color_correction', methods=['POST'])
def color_correction():
    # Get the video file from the request
    video_file = request.files['video']

    # Read the video file using OpenCV
    video_data = cv2.VideoCapture(video_file)

    # Process each frame of the video using the WB model
    corrected_frames = []
    while True:
        ret, frame = video_data.read()
        if not ret:
            break
        out_frame = wbModel.correctImage(frame)
        corrected_frames.append(out_frame)

    # Write the corrected video to a file using OpenCV
    out = cv2.VideoWriter('/content/test_correctcolor_/sample-5s.mp4', cv2.VideoWriter_fourcc(*'mp4v'), 30, (frame.shape[1], frame.shape[0]))
    for i in range(len(corrected_frames)):
        out.write(corrected_frames[i])
    out.release()

    # Return the corrected video file as a response
    return jsonify({'message': 'Video successfully corrected!', 'corrected_video': 'corrected_video.mp4'})

if __name__ == '__main__':
    app.run(debug=True)

"""Обязательно сохранить файл в формате.py перед следующей командой. По другому не сработает."""

!nohup gunicorn --bind 0.0.0.0:5012 appy:app &

!python appy.py

import cv2
from X_MAS_HACK.model1_correction.WB_sRGB_Python.classes.models.model import WBsRGB as wb_srgb

# Create an instance of the WB model
wbModel = wb_srgb.WBsRGB(gamut_mapping=2, upgraded=0)

# Read the video file using OpenCV
video_data = cv2.VideoCapture('/content/test_correctcolor_/sample-5s.mp4')

# Check if the video file was opened successfully
if not video_data.isOpened():
    print("Error opening video file")

# Process each frame of the video using the WB model
corrected_frames = []
while True:
    ret, frame = video_data.read()
    if not ret:
        break
    out_frame = wbModel.correctImage(frame)
    corrected_frames.append(out_frame)

# Check if any frames were processed
if len(corrected_frames) == 0:
    print("No frames were processed")

# Write the corrected video to a file using OpenCV
if len(corrected_frames) > 0:
    out = cv2.VideoWriter('corrected_video.mp4', cv2.VideoWriter_fourcc(*'mp4v'), 30, (corrected_frames[0].shape[1], corrected_frames[0].shape[0]))
    for i in range(len(corrected_frames)):
        out.write((corrected_frames[i] * 255).astype('uint8'))
    out.release()